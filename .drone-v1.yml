---
kind: pipeline
type: kubernetes
name: matrix-1

platform:
  os: linux
  arch: amd64

steps:
- name: install
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/node-10
  commands:
  - node -v
  - npm -v
  - npm ci --silent
  when:
    event:
    - push

- name: unit_tests
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/node-10
  commands:
  - npm run test
  when:
    event:
    - push

- name: build
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/drone-docker
  commands:
  - docker build -t ref-data-service:$${DRONE_COMMIT_SHA} .
  when:
    event:
    - push

- name: synch_dev_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: DEV_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: DEV_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: dev
    DRONE_SERVER: https://drone.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_PUBLIC_TOKEN
  when:
    event:
    - promote
    target:
    - secrets

- name: synch_staging_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: STAGING_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: STAGING_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: staging
    DRONE_SERVER: https://drone.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_PUBLIC_TOKEN
  when:
    event:
    - promote
    target:
    - secrets

- name: synch_production_secrets
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/cop-secrets
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: PRODUCTION_DRONE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: PRODUCTION_DRONE_AWS_SECRET_ACCESS_KEY
    DEPLOY_ENV: production
    DRONE_SERVER: https://drone.acp.homeoffice.gov.uk
    DRONE_TOKEN:
      from_secret: DRONE_PUBLIC_TOKEN
  when:
    event:
    - promote
    target:
    - secrets

- name: vulnerability-scan
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/anchore-submission:latest
  settings:
    dockerfile: Dockerfile
    image_name: ref-data-service:${DRONE_COMMIT_SHA}
    local_image: true
    tolerate: low
  when:
    branch:
    - master
    event:
    - push

- name: image_to_quay
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/drone-docker
  settings:
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/ref-data-service
    tags:
    - ${DRONE_COMMIT_SHA}
  environment:
    DOCKER_PASSWORD:
      from_secret: QUAY_PASSWORD
    DOCKER_USERNAME:
      from_secret: QUAY_USERNAME
  when:
    branch:
    - master
    event:
    - push

- name: deploy_to_dev
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export WWW_REF_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/cert.yml -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
  environment:
    API_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    API_REF_URL:
      from_secret: DEV_API_REF_URL
    ENVIRONMENT:
      from_secret: DEV_ENVIRONMENT
    KEYCLOAK_CLIENT_ID:
      from_secret: WWW_REF_KEYCLOAK_CLIENT_ID
    KEYCLOAK_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    KEYCLOAK_REALM:
      from_secret: DEV_KEYCLOAK_REALM
    KEYCLOAK_URL:
      from_secret: DEV_KEYCLOAK_URL
    KUBE_NAMESPACE:
      from_secret: DEV_KUBE_NAMESPACE_REFDATA
    KUBE_SERVER:
      from_secret: DEV_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: DEV_API_REF_KUBE_TOKEN
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    WWW_REF_IMAGE:
      from_secret: WWW_REF_IMAGE
    WWW_REF_NAME:
      from_secret: WWW_REF_NAME
    WWW_REF_PORT:
      from_secret: WWW_REF_PORT
    WWW_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_REF_READ_ONLY_MODE:
      from_secret: DEV_WWW_REF_READ_ONLY_MODE
    WWW_REF_URL:
      from_secret: DEV_WWW_REF_URL
  when:
    branch:
    - master
    event:
    - push

- name: deploy_to_staging
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export WWW_REF_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/cert.yml -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
  environment:
    API_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    API_REF_URL:
      from_secret: STAGING_API_REF_URL
    ENVIRONMENT:
      from_secret: STAGING_ENVIRONMENT
    KEYCLOAK_CLIENT_ID:
      from_secret: WWW_REF_KEYCLOAK_CLIENT_ID
    KEYCLOAK_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    KEYCLOAK_REALM:
      from_secret: STAGING_KEYCLOAK_REALM
    KEYCLOAK_URL:
      from_secret: STAGING_KEYCLOAK_URL
    KUBE_NAMESPACE:
      from_secret: STAGING_KUBE_NAMESPACE_REFDATA
    KUBE_SERVER:
      from_secret: STAGING_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: STAGING_API_REF_KUBE_TOKEN
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    WWW_REF_IMAGE:
      from_secret: WWW_REF_IMAGE
    WWW_REF_NAME:
      from_secret: WWW_REF_NAME
    WWW_REF_PORT:
      from_secret: WWW_REF_PORT
    WWW_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_REF_READ_ONLY_MODE:
      from_secret: STAGING_WWW_REF_READ_ONLY_MODE
    WWW_REF_URL:
      from_secret: STAGING_WWW_REF_URL
  when:
    event:
    - promote
    target:
    - staging

- name: deploy_to_prod
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/kd
  commands:
  - export WWW_REF_TAG=$${DRONE_COMMIT_SHA}
  - kd --insecure-skip-tls-verify -f kube/cert.yml -f kube/deployment.yml -f kube/service.yml -f kube/ingress.yml -f kube/network-policy.yml
  environment:
    API_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    API_REF_URL:
      from_secret: PRODUCTION_API_REF_URL
    ENVIRONMENT:
      from_secret: PRODUCTION_ENVIRONMENT
    KEYCLOAK_CLIENT_ID:
      from_secret: WWW_REF_KEYCLOAK_CLIENT_ID
    KEYCLOAK_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    KEYCLOAK_REALM:
      from_secret: PRODUCTION_KEYCLOAK_REALM
    KEYCLOAK_URL:
      from_secret: PRODUCTION_KEYCLOAK_URL
    KUBE_NAMESPACE:
      from_secret: PRODUCTION_KUBE_NAMESPACE_REFDATA
    KUBE_SERVER:
      from_secret: PRODUCTION_KUBE_SERVER
    KUBE_TOKEN:
      from_secret: PRODUCTION_API_REF_KUBE_TOKEN
    NGINX_IMAGE:
      from_secret: NGINX_IMAGE
    NGINX_TAG:
      from_secret: NGINX_TAG
    WWW_REF_IMAGE:
      from_secret: WWW_REF_IMAGE
    WWW_REF_NAME:
      from_secret: WWW_REF_NAME
    WWW_REF_PORT:
      from_secret: WWW_REF_PORT
    WWW_REF_PROTOCOL:
      from_secret: PROTOCOL_HTTPS
    WWW_REF_READ_ONLY_MODE:
      from_secret: PRODUCTION_WWW_REF_READ_ONLY_MODE
    WWW_REF_URL:
      from_secret: PRODUCTION_WWW_REF_URL
  when:
    event:
    - promote
    target:
    - production

- name: create-change-desc-production
  pull: if-not-exists
  image: docker:git
  commands:
  - git show --name-only >> $SNOW_DESC_FILE
  when:
    event:
    - promote
    target:
    - production

- name: open-snow-change-production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/snowtify:latest
  environment:
    SNOW_ENDPOINT:
      from_secret: PRODUCTION_SERVICE_NOW_URL
    SNOW_EXTERNAL_ID: ${DRONE_REPO}:${DRONE_COMMIT_SHA}
    SNOW_PROD_PASS:
      from_secret: PRODUCTION_SERVICE_NOW_PASSWORD
    SNOW_PROD_USER:
      from_secret: PRODUCTION_SERVICE_NOW_USERNAME
  when:
    event:
    - promote
    target:
    - production

- name: complete-snow-change-production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/snowtify:latest
  settings:
    comments: Successful deployment of ${DRONE_REPO}:${DRONE_COMMIT_SHA}
    deployment_outcome: success
  environment:
    SNOW_ENDPOINT:
      from_secret: PRODUCTION_SERVICE_NOW_URL
    SNOW_PROD_PASS:
      from_secret: PRODUCTION_SERVICE_NOW_PASSWORD
    SNOW_PROD_USER:
      from_secret: PRODUCTION_SERVICE_NOW_USERNAME
  when:
    event:
    - promote
    status:
    - success
    target:
    - production

- name: cancel-snow-change-production
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/snowtify:latest
  settings:
    comments: Failed deployment of ${DRONE_REPO}:${DRONE_COMMIT_SHA}
    deployment_outcome: fail
  environment:
    SNOW_ENDPOINT:
      from_secret: PRODUCTION_SERVICE_NOW_URL
    SNOW_PROD_PASS:
      from_secret: PRODUCTION_SERVICE_NOW_PASSWORD
    SNOW_PROD_USER:
      from_secret: PRODUCTION_SERVICE_NOW_USERNAME
  when:
    event:
    - promote
    status:
    - failure
    target:
    - production

- name: notify
  pull: if-not-exists
  image: plugins/slack
  settings:
    channel: cop-deployments
    template: "{{#build.deployTo}}\n  *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*\n  {{build.link}}\n{{else}}\n  *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*\n  {{build.link}}\n{{/build.deployTo}}\n"
    username: Drone Build Watcher
  environment:
    SLACK_WEBHOOK:
      from_secret: SLACK_WEBHOOK
  when:
    branch:
    - master
    event:
    - push
    - promote
    status:
    - success
    - failure

...
